name "envire"

using_library 'envire'

import_types_from 'base'
import_types_from "envire/core/EventTypes.hpp"

typekit do                                                                  
    roptr_bin_envent_t     = ro_ptr('std/vector</envire/BinaryEvent>')

    if type_export_policy == :used
        # We assume that, if the caller wants a 'used' type policy, it means he
        # wants partial exports. Move to 'selected'. oroGen would have changed
        # it to 'all'
        type_export_policy :selected
    end

    export_types roptr_bin_envent_t,
        'std/vector</envire/BinaryEvent>',
	'envire/BinaryEvent'
end

task_context "SynchronizationTransmitter" do
    output_port('envire_events', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc('envire binary event').
        keep_last_written_value(false)

    operation('loadEnvironment').
        argument('path', 'string', 'path')
end

task_context "SynchronizationReceiver" do
    property('export_directory', '/std/string').
        doc "if set to a non-empty value, an envire scene will be saved for each received binary event"

    input_port('envire_events', ro_ptr('std/vector</envire/BinaryEvent>')).
        needs_reliable_connection.
        doc('envire binary event')

    port_driven
end

deployment "envire_synchronisation_test" do
    # This is a test deployment that should not be installed
    do_not_install

    task("sync_transmitter", "SynchronizationTransmitter").
        periodic(0.1)
    task("sync_receiver", "SynchronizationReceiver")
end
